pool:
  vmImage: 'windows-latest'

variables:
- name: BuildPlatform
  value: Any CPU
- name: BuildConfiguration
  value: release

steps:
- task: DotNetCoreCLI@2
  displayName: 'DotNetCoreCLI NuGet restore'
  inputs:
    command: 'restore'
    projects: '**/DartCore.sln'
    feedsToUse: 'select'
    vstsFeed: 'c05ca382-95eb-43eb-af0a-00b109382f26'

- task: MSBuild@1
  displayName: 'Build solution **\DartCore.sln'
  inputs:
    solution: '**/DartCore.sln'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '/p:OutDir=$(Build.BinariesDirectory) /p:OutputPath=$(Build.BinariesDirectory)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./MyCoverage/'
#     publishTestResults: true
# - task: VSTest@2
#   inputs:
#     testSelector: 'testAssemblies'
#     testAssemblyVer2: |
#       **\*Tests.dll
#     searchFolder: '$(Build.BinariesDirectory)'
#     codeCoverageEnabled: true
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/MyCoverage/coverage.cobertura.xml'
    failIfCoverageEmpty: true

- task: NuGetCommand@2
  displayName: 'NuGet push'
  inputs:
    command: push
    packagesToPush: '$(Build.BinariesDirectory)/**/*.nupkg'
    publishVstsFeed: 'c05ca382-95eb-43eb-af0a-00b109382f26'
    allowPackageConflicts: true

- task: chrismason.vsts-docfxtasks.docfx-extension-build-task.DocFxTask@0
  displayName: 'Create DocFx Documentation Environment'
  inputs:
    solution: '$(System.DefaultWorkingDirectory)/DartCore/Environment/docfx.json'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)/docu/Environment/'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/DartCore/Environment/_site'
    TargetFolder: '$(build.artifactstagingdirectory)/docu/Environment/'

- task: chrismason.vsts-docfxtasks.docfx-extension-build-task.DocFxTask@0
  displayName: 'Create DocFx Documentation GameLogic'
  inputs:
    solution: '$(System.DefaultWorkingDirectory)/DartCore/GameLogic/docfx.json'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)/docu/GameLogic/'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/DartCore/GameLogic/_site'
    TargetFolder: '$(build.artifactstagingdirectory)/docu/GameLogic/'

- task: CopyFiles@2
  displayName: 'Copy binaries to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/binaries'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

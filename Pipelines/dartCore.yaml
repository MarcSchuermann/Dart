pool:
  vmImage: 'windows-latest'

variables:
- name: BuildPlatform
  value: Any CPU
- name: BuildConfiguration
  value: release
- name: Solution
  value: DartCore/DartCore.sln

parameters:
- name: publishNuget
  displayName: publish to VstsFeed
  type: boolean
  default: false
- name: alpha
  displayName: set alpha version
  type: boolean
  default: true

steps:
# --- Restore nuget packages ---
- task: DotNetCoreCLI@2
  displayName: 'DotNetCoreCLI NuGet restore'
  inputs:
    command: 'restore'
    projects: $(Solution)
    feedsToUse: 'select'
    vstsFeed: 'c05ca382-95eb-43eb-af0a-00b109382f26'

# --- Get Version from targets file ---
- task: PowerShell@2
  displayName: Update Version
  inputs:
    targetType: 'inline'
    script: |
      [xml]$targetsFile = Get-Content -Path $(Build.SourcesDirectory)/DartCore/DartCore.Build.targets
      Get-ChildItem '$(Build.SourcesDirectory)' -Recurse
      Get-Content $(Build.SourcesDirectory)/DartCore/DartCore.Build.targets

      [xml]$targetsFile = Get-Content -Path $(Build.SourcesDirectory)/DartCore/DartCore.Build.targets
      $version = $targetsFile.Project.PropertyGroup.Version
      Write-Host "readVersion is $version"
      if ($version -Match " ")
      {
        $version = $version.replace(' ','')
        Write-Host "Cleand readVersion is $version"
      }

      if ( '${{ parameters.alpha }}' -eq 'true' )
      {
        $alphaVersion = $version+"-alpha.$(Build.BuildNumber)"
        Write-Host "Full version is $alphaVersion"
        Write-Host "##vso[task.setvariable variable=fullVersion]$alphaVersion"
      }
      else
      {
        Write-Host "Full version is $version"
        Write-Host "##vso[task.setvariable variable=fullVersion]$version"
      }

# --- Run build ---
- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: $(Solution)
    arguments: '/p:OutDir=$(Build.BinariesDirectory) /p:OutputPath=$(Build.BinariesDirectory) /p:Configuration=$(BuildConfiguration) /p:Version=$(fullVersion)'


# --- Run unit tests ---
- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: $(Solution)
    arguments: '--no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./MyCoverage/'

# --- Merge the multiple code coverage result files ---
- task: reportgenerator@5
  displayName: 'Merge code coverage reports'
  inputs:
    reports: '$(Build.SourcesDirectory)/**/MyCoverage/coverage.cobertura.xml'
    targetdir: '$(Pipeline.Workspace)/coverlet'
    reporttypes: 'Cobertura'
    verbosity: 'Verbose'

# --- Publish code coverage results ---
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Pipeline.Workspace)/coverlet/Cobertura.xml'
    failIfCoverageEmpty: true

# --- Publish nuget packages ---
- task: NuGetCommand@2
  condition: and(succeeded(), eq('${{ parameters.publishNuget }}', 'true'))
  displayName: 'NuGet push'
  inputs:
    command: push
    packagesToPush: '$(Build.BinariesDirectory)/**/Schuermann.Darts.*.nupkg'
    publishVstsFeed: 'c05ca382-95eb-43eb-af0a-00b109382f26'
    allowPackageConflicts: true

# --- Create docu for environment ---
- task: DocFxTask@0
  displayName: 'Create DocFx Documentation Environment'
  inputs:
    solution: '$(System.DefaultWorkingDirectory)/DartCore/Environment/docfx.json'

# --- Copy docu for environment ---
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)/docu/Environment/'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/DartCore/Environment/_site'
    TargetFolder: '$(build.artifactstagingdirectory)/docu/Environment/'

# --- Create docu for game logic ---
- task: DocFxTask@0
  displayName: 'Create DocFx Documentation GameLogic'
  inputs:
    solution: '$(System.DefaultWorkingDirectory)/DartCore/GameLogic/docfx.json'

# --- Copy docu for game logic ---
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)/docu/GameLogic/'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/DartCore/GameLogic/_site'
    TargetFolder: '$(build.artifactstagingdirectory)/docu/GameLogic/'

# --- Copy all BinariesDirectory to staging directory ---
- task: CopyFiles@2
  displayName: 'Copy binaries to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)/binaries'
  condition: succeededOrFailed()

# --- Publish drop ---
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()